# CloudFoxable - It's Another Secret Challenge Write-Up

## Introduction
The **CloudFoxable - It's Another Secret** challenge involves leveraging AWS IAM role permissions to retrieve a hidden flag. In this challenge, we will assume the **Ertz** role, enumerate permissions, and retrieve the secret from the AWS Systems Manager (SSM) Parameter Store. Instead of using the **CloudFox** tool, we will use the **AWS CLI** to complete the challenge.

---

## Step 1: Verify Role Existence
Before assuming the role, we need to verify that the **Ertz** role exists and is accessible. We use the following AWS CLI command to check:

```bash
aws iam get-role --role-name ertz --profile cloudfoxable
```

This command confirms the existence of the **Ertz** role and its associated policies.

---

## Step 2: Assume the Ertz Role
To access the secrets, we must assume the **Ertz** role and obtain temporary credentials using **STS (Security Token Service)**:

```bash
aws sts assume-role --role-arn arn:aws:iam::425670648728:role/Ertz --role-session-name Ertz --profile cloudfoxable
```

The command will provide:
- Access Key ID
- Secret Access Key
- Session Token

### Configuring the AWS Profile for Ertz Role
We create a local AWS profile for the **Ertz** role by adding the temporary credentials to the `~/.aws/credentials` file:

```
[ertz]
aws_access_key_id = <AccessKeyID>
aws_secret_access_key = <SecretAccessKey>
aws_session_token = <SessionToken>
```

### Verifying the Assumed Role
To ensure the role assumption is successful, we use:

```bash
aws sts get-caller-identity --profile ertz
```

---

## Step 3: Enumerate Role Permissions
We need to understand what permissions are granted to the **Ertz** role. First, we list the policies attached to the role:

```bash
aws iam list-attached-role-policies --role-name ertz --profile cloudfoxable
```

### Analyzing the Policy
To get the specific details of the policy, we run:

```bash
aws iam get-policy-version --policy-arn arn:aws:iam::425670648728:policy/its-another-secret-policy --version-id v1 --profile cloudfoxable
```

The policy grants the **ssm:GetParameter** action on the following SSM parameter:

```
arn:aws:ssm:us-west-2:425670648728:parameter/cloudfoxable/flag/its-another-secret
```

---

## Step 4: Retrieving the Secret
Since the **Ertz** role has the required permission, we can directly access the parameter from the **SSM Parameter Store**:

```bash
aws ssm get-parameter --name /cloudfoxable/flag/its-another-secret --profile ertz
```

Since the secret is stored as a **SecureString**, we add the `--with-decryption` flag to view the decrypted value:

```bash
aws ssm get-parameter --name /cloudfoxable/flag/its-another-secret --with-decryption --profile ertz
```

The command returns the flag:

```
FLAG{ItsAnotherSecret::ThereWillBeALotOfAssumingRolesInThisCTF}
```

---

## Challenges Faced
- Understanding role assumption and temporary credentials.
- Properly configuring the AWS CLI to automatically assume the role.
- Analyzing IAM policies to identify the secret access permissions.

---

## Key Takeaways
- Always verify role permissions when dealing with AWS IAM.
- AWS CLI is a powerful tool to assume roles and manage credentials efficiently.
- Proper role management and policy analysis are essential for cloud security.

---

## Conclusion
The **CloudFoxable - It's Another Secret** challenge demonstrates how AWS IAM role assumptions can be exploited to retrieve sensitive data. By correctly configuring profiles and leveraging **AWS CLI** commands, we successfully retrieved the secret flag.

